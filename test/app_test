import 'package:flutter/widgets.dart';

import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:watch_it/watch_it.dart';

import 'package:flutterfly/app.dart';
import 'package:flutterfly/core/di/inject.dart';
import 'package:flutterfly/core/utils/platforms.dart';
import 'package:flutterfly/features/common/ui/services/desktop_service.dart';
import 'package:flutterfly/features/cupertino/ui/layout/cupertino_layout.dart';
import 'setup.dart';

class MockPlatform extends Mock implements Platform {}

class MockDesktopService extends Mock implements DesktopService {}

void main() {
  group('App', () {
    setUpAll(() async {
      TestWidgetsFlutterBinding.ensureInitialized();
      PathProviderPlatform.instance = MockPathProviderPlatform();
    });

    setUp(() async {
      await GetIt.I.reset();
      await configInjection();
      GetIt.I.unregister<Platform>();
      GetIt.I.unregister<DesktopService>();
      GetIt.I.registerSingleton<Platform>(MockPlatform());
      GetIt.I.registerSingleton<DesktopService>(MockDesktopService());
    });
    testWidgets('Should display CupertinoLayout for iOS platform',
        (final tester) async {
      final platform = GetIt.I.get<Platform>();

      when(platform.isIos).thenReturn(true);
      when(platform.isMacOS).thenReturn(false);
      when(platform.isDesktop).thenReturn(false);

      await tester.pumpWidget(const App());

      expect(find.byType(CupertinoLayout), findsOneWidget);
    });

    testWidgets('Should display MaterialLayout for Android platform',
        (tester) async {});

    testWidgets(
        'Should display DesktopSelectorPage for Desktop platform with state none',
        (tester) async {});

    testWidgets(
        'Should display MaterialLayout for Desktop platform with state material',
        (tester) async {});

    testWidgets(
        'Should display CupertinoLayout for Desktop platform with state cupertino',
        (tester) async {});

    testWidgets(
        'Should display FluentLayout for Desktop platform with any other state',
        (tester) async {});
  });
}
